name: n2n_lucktu

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
    schedule:
        - cron: "30 7 * * *"
    push:
        branches: ["alpha"]
        # Publish semver tags as releases.
    pull_request:
        branches: ["alpha"]

env:
    # Use docker.io for Docker Hub if empty
    # REGISTRY: ghcr.io
    REGISTRY: docker.io
    # github.repository as <account>/<repo>
    KERNEL: linux
    MACHINE: ""
    CLONE: "true"
    # BIG_VERSION: v3
    # SMALL_VERSION: 3.1.1-16
    # COMMIT: 1200

    BIG_VERSION: v2
    SMALL_VERSION: 2.7.0
    COMMIT: 528

jobs:
    check_version:
        runs-on: ubuntu-latest
        outputs:
            latest_big_version: ${{ steps.latest_version.outputs.latest_big_version }}
            latest_small_version: ${{ steps.latest_version.outputs.latest_small_version }}
            latest_commit: ${{ steps.latest_version.outputs.latest_commit }}
            latest_version: ${{ steps.latest_version.outputs.latest_version }}
            latest: ${{ steps.latest_version.outputs.latest }}
            build_big_version: ${{ steps.build_version.outputs.build_big_version }}
            build_small_version: ${{ steps.build_version.outputs.build_small_version }}
            build_commit: ${{ steps.build_version.outputs.build_commit }}
            build_version: ${{ steps.build_version.outputs.build_version }}
            platforms: ${{ steps.build_platforms.outputs.platforms }}

        permissions:
            contents: read
            packages: write

        steps:
            - name: get latest_path
              id: get_latest_path
              uses: sergeysova/jq-action@v2
              with:
                  cmd: curl -k -sS https://api.github.com/repos/lucktu/n2n/contents/Linux?ref=master | jq '.[]|{path}|..|.path?' | grep linux_x64 | sed 's/\"//g'

            - name: Check latest_version
              id: latest_version
              run: |
                  LOG_INFO() {
                  echo -e "\033[0;32m[INFO] $* \033[0m"
                  }
                  LOG_WARNING() {
                      echo -e "\033[0;33m[WARNING] $* \033[0m"
                  }
                  LOG_ERROR() {
                      echo -e "\033[0;31m[ERROR] $* \033[0m"
                  }
                  latest_path=${{ steps.get_latest_path.outputs.value }}
                  LOG_INFO "latest_path: ${latest_path}"
                  # e.g. n2n_v3_linux_x64_v3.1.1-16_r1200_all_by_heiye.rar
                  latest_file=${latest_path##*/}
                  LOG_INFO "latest_file: ${latest_file}"
                  # e.g. v3
                  latest_big_version=${latest_file#*n2n_}
                  latest_big_version=${latest_big_version%_linux*}
                  LOG_INFO "latest_big_version: ${latest_big_version}"
                  # e.g. 3.1.1-16
                  latest_small_version=${latest_file##*_v}
                  latest_small_version=${latest_small_version%%_r*}
                  LOG_INFO "latest_small_version: ${latest_small_version}"
                  # e.g. 1200
                  latest_commit=${latest_file##*${latest_small_version}}
                  latest_commit=${latest_commit##*_r}
                  latest_commit=${latest_commit%%.*}
                  latest_commit=${latest_commit%%_*}
                  LOG_INFO "latest_commit: ${latest_commit}"
                  # latest_version
                  latest_version="${latest_big_version}_${latest_small_version}_r${latest_commit}"
                  LOG_INFO "latest_version: ${latest_version}"
                  # latest variable
                  echo "latest_big_version=${latest_big_version}" >> $GITHUB_OUTPUT
                  echo "latest_small_version=${latest_small_version}" >> $GITHUB_OUTPUT
                  echo "latest_commit=${latest_commit}" >> $GITHUB_OUTPUT
                  echo "latest_version=${latest_version}" >> $GITHUB_OUTPUT
            - name: Check build_version
              id: build_version
              run: |
                  LOG_INFO() {
                  echo -e "\033[0;32m[INFO] $* \033[0m"
                  }
                  LOG_WARNING() {
                      echo -e "\033[0;33m[WARNING] $* \033[0m"
                  }
                  LOG_ERROR() {
                      echo -e "\033[0;31m[ERROR] $* \033[0m"
                  }
                  # build-version
                  if [[ -z "${{ env.BIG_VERSION }}" || -z "${{ env.SMALL_VERSION }}" ]];then
                      build_big_version=${{ steps.latest_version.outputs.latest_big_version }}
                      LOG_INFO "build_big_version: ${build_big_version}"
                      build_small_version=${{ steps.latest_version.outputs.latest_small_version }}
                      LOG_INFO "build_small_version: ${build_small_version}"
                      build_commit=${{ steps.latest_version.outputs.latest_commit }}
                      LOG_INFO "build_commit: ${build_commit}"

                  else
                      build_big_version=${{ env.BIG_VERSION }}
                      LOG_INFO "build_big_version: ${build_big_version}"
                      build_small_version=${{ env.SMALL_VERSION }}
                      LOG_INFO "build_small_version: ${build_small_version}"
                      build_commit=${{ env.COMMIT }}
                      LOG_INFO "build_commit: ${build_commit}"
                  fi
                  if [[ ! "${build_big_version}" =~ "v" || ${build_small_version} =~ "v" ||  ${build_commit} =~ "r"  ]];then
                      LOG_ERROR "不合法 - 版本号"
                      exit 1
                  fi
                  # build_version
                  build_version="${build_big_version}_${build_small_version}_r${build_commit}"
                  LOG_INFO "build_version: ${build_version}"
                  # build variable
                  echo "build_big_version=${build_big_version}" >> $GITHUB_OUTPUT
                  echo "build_small_version=${build_small_version}" >> $GITHUB_OUTPUT
                  echo "build_commit=${build_commit}" >> $GITHUB_OUTPUT
                  echo "build_version=${build_version}" >> $GITHUB_OUTPUT

            - name: Check build_platforms
              id: build_platforms
              run: |
                  LOG_INFO() {
                      echo -e "\033[0;32m[INFO] $* \033[0m"
                  }
                  LOG_WARNING() {
                      echo -e "\033[0;33m[WARNING] $* \033[0m"
                  }
                  LOG_ERROR() {
                      echo -e "\033[0;31m[ERROR] $* \033[0m"
                  }
                  build_kernel=${{ env.KERNEL }}
                  build_big_version=${{ steps.build_version.outputs.build_big_version }}
                  build_small_version=${{ steps.build_version.outputs.build_small_version }}
                  build_commit=${{ steps.build_version.outputs.build_commit }}
                  platforms=''
                  for fnx_platform in "x64" "x86" "arm64" "arm"; do
                      case ${fnx_platform} in
                      x64)
                          dn_machine="x64"
                          fn_machine="x64"
                          ;;
                      x86)
                          dn_machine="x86"
                          fn_machine="x86"
                          ;;
                      arm64 | aarch64)
                          dn_machine="arm64"
                          fn_machine="arm64(aarch64)"
                          ;;
                      arm64eb | aarch64eb)
                          dn_machine="arm64eb"
                          fn_machine="arm64eb(aarch64eb)"
                          ;;
                      arm)
                          dn_machine="arm"
                          fn_machine="arm"
                          ;;
                      *)
                          LOG_ERROR "不支持的CPU架构类型 - ${fn_platform}"
                          dn_machine=${fnx_platform}
                          fn_machine=${fnx_platform}
                          ;;
                      esac
                      LOG_INFO "dn_machine: ${dn_machine}, fn_machine: ${fn_machine}"

                      # 遍历可能存在的文件夹进行匹配
                      for down_dir in "" "/Old/linux_${dn_machine}" "/n2n_${build_big_version}"; do
                          if [[ "${down_dir}" == "/n2n_v3" ]]; then
                              continue
                          fi
                          api_url=https://api.github.com/repos/lucktu/n2n/contents/${build_kernel^}${down_dir}?ref=master
                          LOG_INFO "api_url: ${api_url}"
                          resp="$(curl -k -sS ${api_url})"
                          if [[ ! -z $(echo "$resp" || jq '.message') && -z $(echo "${resp}" | jq '.[]|{path}') ]]; then
                              LOG_ERROR "resp: $resp"
                              exit 1
                          fi
                          result=$(echo "${resp}" | jq '.[]|{path}|..|.path?')
                          down_path=$(echo "${result}" | grep ${KERNEL}_${fn_machine}_ | grep ${build_big_version} | grep ${build_small_version} | grep ${build_commit} | sed 's/\"//g')
                          if [[ -z "${down_path}" ]]; then
                              LOG_WARNING "down_path 获取失败 - ${down_dir} - ${api_url}"
                              LOG_WARNING "${KERNEL}_${fn_machine}_${build_big_version}_${build_small_version}_${build_commit}"
                              LOG_ERROR "resp: $resp"
                              LOG_ERROR "path[] : $(echo ${resp} | jq '.[]|{path}')"
                              LOG_ERROR "path|..: $(echo ${resp} | jq '.[]|{path}|..')"
                              LOG_ERROR ".path  : $(echo ${resp} | jq '.[]|{path}|..|..path?')"
                              LOG_ERROR "result : $result"
                              continue
                          fi
                          LOG_INFO "use down_dir: ${down_dir}"
                          break
                      done
                      case ${fnx_platform} in
                      x64)
                          add_platform="linux/amd64"
                          ;;
                      x86)
                          add_platform="linux/386"
                          ;;
                      arm64 | aarch64)
                          add_platform="linux/arm64"
                          ;;
                      arm)
                          add_platform="linux/arm/v7"
                          ;;

                      *)
                          LOG_ERROR "不支持的CPU架构类型 - ${fnx_platform}"
                          exit 1
                          ;;
                      esac
                      if [[ -z "${down_path}" ]]; then
                          LOG_WARNING "not found: ${fnx_platform}"
                          continue
                      fi
                      LOG_INFO "find: ${fnx_platform}"
                      platforms="${platforms}, ${add_platform}"
                  done
                  platforms="${platforms:2}"

                  if [[ -z "${platforms}" ]]; then
                      LOG_ERROR "platforms 获取失败"
                      exit 1
                  fi
                  LOG_INFO "platforms: ${platforms}"
                  echo "platforms=${platforms}" >> $GITHUB_OUTPUT
    check_push:
        runs-on: ubuntu-latest
        outputs:
            last_pulled_date: ${{ steps.tag_last_pulled.outputs.last_pulled_date }}
            skip_build_push: ${{ steps.tag_last_pulled.outputs.skip_build_push }}
        needs: [check_version]
        permissions:
            contents: read
            packages: write

        steps:
            - name: get tag_last_pulled
              id: get_tag_last_pulled
              uses: sergeysova/jq-action@v2
              with:
                  cmd: curl -k -sS https://hub.docker.com/v2/repositories/zctmdc/n2n_lucktu/tags/${{ needs.check_version.outputs.build_version }} | jq '.tag_last_pulled'

            - name: Check tag_last_pulled
              id: tag_last_pulled
              run: |
                  LOG_INFO() {
                  echo -e "\033[0;32m[INFO] $* \033[0m"
                  }
                  LOG_WARNING() {
                      echo -e "\033[0;33m[WARNING] $* \033[0m"
                  }
                  LOG_ERROR() {
                      echo -e "\033[0;31m[ERROR] $* \033[0m"
                  }
                  # e.g. "2022-10-30T19:29:49.877019Z"
                  last_pulled_date=${{ steps.get_tag_last_pulled.outputs.value }}
                  echo "last_pulled_date=${last_pulled_date}" >> $GITHUB_OUTPUT
                  LOG_INFO "last_pulled_date - ${last_pulled_date}"
                  if [[ "${{ env.FORCE_PUSH }}" ]]; then
                      LOG_WARNING "强制 编译/推送"
                  elif [[ "${last_pulled_date,,}" != "null" ]]; then
                      echo 'skip_build_push=true' >> $GITHUB_OUTPUT
                      LOG_INFO "跳过 编译/推送"
                      exit 0
                  else
                      LOG_INFO "准备 编译/推送"
                  fi

    build_n2n_lucktu:
        needs: [check_version, check_push]
        if: ${{ needs.check_push.outputs.skip_build_push != true }}
        runs-on: ubuntu-latest
        env:
            APP_NAME: n2n_lucktu
        permissions:
            contents: read
            packages: write
            # This is used to complete the identity challenge
            # with sigstore/fulcio when running outside of PRs.
            id-token: write

        steps:
            - name: echo outputs
              id: check_outputs
              run: |
                  echo  ${{ needs.check_push.outputs.skip_build_push }}
                  echo  ${{ needs.check_push.outputs.skip_build_push != true }}
                  echo  ${{ needs.check_push.outputs.skip_build_push != 'true' }}
                  echo  ${{ needs.check_push.outputs.skip_build_push != "true" }}

            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2

            # Install the cosign tool except on PR
            # https://github.com/sigstore/cosign-installer
            - name: Install cosign
              if: github.event_name != 'pull_request'
              uses: sigstore/cosign-installer@main
              with:
                  cosign-release: "v1.13.1"

            # Workaround: https://github.com/docker/build-push-action/issues/461
            - name: Setup Docker buildx
              uses: docker/setup-buildx-action@v2

            # Login against a Docker registry except on PR
            # https://github.com/docker/login-action
            - name: Log into registry ${{ env.REGISTRY }}
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            # Extract metadata (tags, labels) for Docker
            # https://github.com/docker/metadata-action
            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.APP_NAME }}
                  tags: |
                      type=raw,value=alpha,enable=${{ github.ref == format('refs/heads/{0}', 'alpha') }}
                      type=raw,value=beta,enable=${{ github.ref == format('refs/heads/{0}', 'beta') }}
                      type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
                      type=raw,value=v3,enable=${{ needs.check_version.outputs.build_big_version == 'v3' }}
                      type=raw,value=releases-v3,enable=${{ needs.check_version.outputs.build_big_version == 'v3' }}
                      type=raw,value=v2s,enable=${{ needs.check_version.outputs.build_big_version == 'v2s' && needs.check_version.outputs.build_small_version == '2.1.0' && needs.check_version.outputs.build_commit == '124' }}
                      type=raw,value=releases-v2s,enable=${{ needs.check_version.outputs.build_big_version == 'v2s' && needs.check_version.outputs.build_small_version == '2.1.0' && needs.check_version.outputs.build_commit == '124' }}
                      type=raw,value=v2,enable=${{ needs.check_version.outputs.build_big_version == 'v2' && needs.check_version.outputs.build_small_version == '2.7.0' && needs.check_version.outputs.build_commit == '525' }}
                      type=raw,value=releases-v2,enable=${{ needs.check_version.outputs.build_big_version == 'v2' && needs.check_version.outputs.build_small_version == '2.7.0' && needs.check_version.outputs.build_commit == '525' }}
                      type=raw,value=v1,enable=${{ needs.check_version.outputs.build_big_version == 'v1' && needs.check_version.outputs.build_small_version == '1.3.2' && needs.check_version.outputs.build_commit == '124' }}
                      type=raw,value=releases-v1,enable=${{ needs.check_version.outputs.build_big_version == 'v1' && needs.check_version.outputs.build_small_version == '1.3.2' && needs.check_version.outputs.build_commit == '124' }}
                      type=raw,value=${{ format( '{0}_{1}_r{2}', needs.check_version.outputs.build_big_version, needs.check_version.outputs.build_small_version, needs.check_version.outputs.build_commit ) }}, enable=${{ needs.check_version.outputs.build_big_version != '' && needs.check_version.outputs.build_small_version != '' && needs.check_version.outputs.build_commit != '' }}
                      type=raw,value=${{ format( 'v.{1}_r{2}',  needs.check_version.outputs.build_big_version, needs.check_version.outputs.build_small_version, needs.check_version.outputs.build_commit ) }}, enable=${{ needs.check_version.outputs.build_small_version != '' && needs.check_version.outputs.build_commit != '' }}
                      type=raw,value=${{ format( 'v.{1}',  needs.check_version.outputs.build_big_version, needs.check_version.outputs.build_small_version, needs.check_version.outputs.build_commit ) }}, enable=${{ needs.check_version.outputs.build_small_version != '' }}
                  labels: |
                      org.opencontainers.image.version=${{ format( '{0}_{1}_r{2}', needs.check_version.outputs.build_big_version, needs.check_version.outputs.build_small_version, needs.check_version.outputs.build_commit ) }}

            - name: Build and export to Docker
              uses: docker/build-push-action@v3
              with:
                  context: ${{ env.APP_NAME }}
                  load: true
                  tags: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.APP_NAME }}:test
                  cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.actor }}/${{ env.APP_NAME }}:buildcache
                  cache-to: type=inline

            - name: Test
              run: |
                  docker run --rm ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.APP_NAME }}:test edge -h

            # Build and push Docker image with Buildx (don't push on PR)
            # https://github.com/docker/build-push-action
            - name: Build and push Docker image
              id: build-and-push
              uses: docker/build-push-action@v3
              with:
                  context: ${{ env.APP_NAME }}
                  platforms: ${{ needs.check_version.outputs.platforms }}
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=inline
                  cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.actor }}/${{ env.APP_NAME }}:buildcache,mode=max

                  build-args: |
                      BIG_VERSION=${{ needs.check_version.outputs.build_big_version }}
                      SMALL_VERSION=${{ needs.check_version.outputs.build_small_version }}
                      COMMIT=${{ needs.check_version.outputs.build_commit }}
                      CLONE=${{ env.CLONE }}
            # "${{ env.BIG_VERSION }}" == "${build_big_version}" || "${{ env.SMALL_VERSION }}" == "${build_small_version}" || "${{ env.COMMIT }}" == "${build_commit}"
            # Sign the resulting Docker image digest except on PRs.
            # This will only write to the public Rekor transparency log when the Docker
            # repository is public to avoid leaking data.  If you would like to publish
            # transparency data even for private images, pass --force to cosign below.
            # https://github.com/sigstore/cosign
            - name: Sign the published Docker image
              if: ${{ github.event_name != 'pull_request' }}
              env:
                  COSIGN_EXPERIMENTAL: "true"
              # This step uses the identity token to provision an ephemeral certificate
              # against the sigstore community Fulcio instance.
              run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
