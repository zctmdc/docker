name: n2n_lucktu

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
    schedule:
        - cron: "30 7 * * *"
    push:
        branches: ["alpha"]
        # Publish semver tags as releases.
    pull_request:
        branches: ["alpha"]

env:
    # Use docker.io for Docker Hub if empty
    # REGISTRY: ghcr.io
    REGISTRY: docker.io
    # github.repository as <account>/<repo>

    KERNEL: linux

    BIG_VERSION: v3
    SMALL_VERSION: 3.1.1-16
    COMMITS: r1200

jobs:
    check_version:
        runs-on: ubuntu-latest
        outputs:
            latest_big_version: ${{ steps.latest_info.outputs.latest_big_version }}
            latest_small_version: ${{ steps.latest_info.outputs.latest_small_version }}
            latest_commits: ${{ steps.latest_info.outputs.latest_commits }}
            latest_version: ${{ steps.latest_info.outputs.latest_version }}

        permissions:
            contents: read
            packages: write

        steps:
            - name: get latest_path
              id: get_latest_path
              uses: sergeysova/jq-action@v2
              with:
                  cmd: curl -k -sS https://api.github.com/repos/lucktu/n2n/contents/Linux?ref=master | jq '.[]|{path}|..|.path?' | grep linux_x64 | sed 's/\"//g'

            - name: Check latest Version
              id: latest_info
              run: |
                  LOG_INFO() {
                  echo -e "\033[0;32m[INFO] $* \033[0m"
                  }
                  latest_path=${{ steps.get_latest_path.outputs.value }}
                  LOG_INFO latest_path=${latest_path}

                  # e.g. n2n_v3_linux_x64_v3.1.1-16_r1200_all_by_heiye.rar
                  latest_file=${latest_path##*/}
                  LOG_INFO latest_file=${latest_file}

                  # e.g. v3
                  latest_big_version=${latest_file#*n2n_}
                  latest_big_version=${latest_big_version%_linux*}
                  LOG_INFO latest_big_version=${latest_big_version}

                  # e.g. 3.1.1-16
                  latest_small_version=${latest_file##*_v}
                  latest_small_version=${latest_small_version%%_r*}

                  # e.g. 1200
                  latest_commits=${latest_file##*${latest_small_version}}
                  LOG_INFO latest_small_version=${latest_small_version}
                  latest_commits=${latest_commits##*_r}
                  latest_commits=${latest_commits%%.*}
                  latest_commits=${latest_commits%%_*}
                  LOG_INFO latest_commits=${latest_commits}

                  # latest_version=format( '${0}_${1}_r${2}', ${latest_big_version}, ${latest_small_version}, ${latest_commits} )
                  latest_version="${latest_big_version}_r${latest_small_version}_${latest_commits}"
                  LOG_INFO latest_version=${latest_version}

                  # Setting environment variable
                  echo "latest_big_version=${latest_big_version}" >> $GITHUB_OUTPUT
                  echo "latest_small_version=${latest_small_version}" >> $GITHUB_OUTPUT
                  echo "latest_commits=${latest_commits}" >> $GITHUB_OUTPUT
                  echo "latest_version=${latest_version}" >> $GITHUB_OUTPUT

    check_push:
        runs-on: ubuntu-latest
        outputs:
            last_pulled_date: ${{ steps.tag_last_pulled.outputs.last_pulled_date }}
        needs: [check_version]
        permissions:
            contents: read
            packages: write

        steps:
            - name: get tag_last_pulled
              id: get_tag_last_pulled
              uses: sergeysova/jq-action@v2
              with:
                  cmd: curl https://hub.docker.com/v2/repositories/zctmdc/n2n_lucktu/tags/${{ needs.get_latest_path.outputs.latest_version }} | jq .tag_last_pulled
            - name: Check tag_last_pulled
              id: tag_last_pulled
              run: |
                  LOG_INFO() {
                  echo -e "\033[0;32m[INFO] $* \033[0m"
                  }

                  LOG_WARNING() {
                  echo -e "\033[0;33m[WARNING] $* \033[0m"
                  }

                  # e.g. "2022-10-30T19:29:49.877019Z"
                  last_pulled_date=${{ steps.get_tag_last_pulled.outputs.value }}
                  echo "last_pulled_date=${last_pulled_date}" >> $GITHUB_OUTPUT
                  LOG_INFO "last_pulled_date - ${last_pulled_date}"
                  if [[ "${{ env.FORCE_PUSH }}" ]]; then
                      LOG_WARNING "强制编译/推送"
                  elif [[ "${last_pulled_date,,}" != "null" ]]; then
                      LOG_INFO "跳过编译/推送"
                      exit 0
                  else
                      LOG_INFO "准备编译/推送"
                  fi

    build_n2n_lucktu:
        needs: [check_push]
        env:
            APP_NAME: n2n_lucktu
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            # This is used to complete the identity challenge
            # with sigstore/fulcio when running outside of PRs.
            id-token: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2

            # Install the cosign tool except on PR
            # https://github.com/sigstore/cosign-installer
            - name: Install cosign
              if: github.event_name != 'pull_request'
              uses: sigstore/cosign-installer@main
              with:
                  cosign-release: "v1.13.1"

            # Workaround: https://github.com/docker/build-push-action/issues/461
            - name: Setup Docker buildx
              uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

            # Login against a Docker registry except on PR
            # https://github.com/docker/login-action
            - name: Log into registry ${{ env.REGISTRY }}
              if: github.event_name != 'pull_request'
              uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            # Extract metadata (tags, labels) for Docker
            # https://github.com/docker/metadata-action
            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
              with:
                  images: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.APP_NAME }}
                  tags: |
                      type=raw,value=Alpha,enable=${{ github.ref == format('refs/heads/{0}', 'alpha') }}
                      type=raw,value=${{ needs.latest_info.outputs.latest_big_version }}, enable=${{ needs.latest_info.outputs.latest_big_version != '' }}
                      type=raw,value=${{ needs.latest_info.outputs.latest_small_version }}, enable=${{ needs.latest_info.outputs.latest_small_version != '' }}
                      type=raw,value=${{ needs.latest_info.outputs.latest_commits }}, enable=${{ needs.latest_info.outputs.latest_commits != '' }}
                      type=raw,value=${{ needs.latest_info.outputs.latest_version }}, enable=${{ needs.latest_info.outputs.latest_version != '' }}
                      type=raw,value=${{ format( '{0}_{1}', needs.latest_info.outputs.latest_big_version, needs.latest_info.outputs.latest_small_version ) }}, enable=${{ needs.latest_info.outputs.latest_big_version != '' && needs.latest_info.outputs.latest_small_version != '' }}
                      type=raw,value=${{ format( '{0}_r{1}', needs.latest_info.outputs.latest_small_version, needs.latest_info.outputs.latest_commits) }}, enable=${{ needs.latest_info.outputs.latest_small_version != '' && needs.latest_info.outputs.latest_commits != '' }}

            # latest_big_version: ${{ needs.latest_info.outputs.latest_big_version }}
            # latest_small_version: ${{ needs.latest_info.outputs.latest_small_version }}
            # latest_commits: ${{ needs.latest_info.outputs.latest_commits }}
            # latest_version: ${{ needs.latest_info.outputs.latest_version }}

            # Build and push Docker image with Buildx (don't push on PR)
            # https://github.com/docker/build-push-action
            - name: Build and push Docker image
              id: build-and-push
              uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
              with:
                  context: ${{ env.APP_NAME }}
                  platforms: linux/amd64,linux/arm64,linux/arm/v7
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            # Sign the resulting Docker image digest except on PRs.
            # This will only write to the public Rekor transparency log when the Docker
            # repository is public to avoid leaking data.  If you would like to publish
            # transparency data even for private images, pass --force to cosign below.
            # https://github.com/sigstore/cosign
            - name: Sign the published Docker image
              if: ${{ github.event_name != 'pull_request' }}
              env:
                  COSIGN_EXPERIMENTAL: "true"
              # This step uses the identity token to provision an ephemeral certificate
              # against the sigstore community Fulcio instance.
              run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
