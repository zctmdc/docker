name: n2n-build-test

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
    workflow_call:
        inputs:
            VERSION_BIG:
                description: "version_big                 e.g. v3 | v2"
                required: true
                type: string
            VERSION_SMALL:
                description: "version_small               e.g. 3.1.1 | 2.1.0"
                required: false
                type: string
            VERSION_COMMIT:
                description: "version_commit              e.g. 1255 | 124"
                required: false
                type: string
            VERSION_B_S_rC:
                description: "VERSION_B_S_rC              e.g. v3 | v3_3.1.1_r1255"
                required: true
                type: string
            STR_OS_ARCHS:
                description: "str_os_archs                e.g. linux/amd64"
                required: true
                type: string
            STR_DOWNLOAD_URLS:
                description: "str_download_urls           e.g. https://raw.githubusercontent.com/lucktu/n2n/master/Linux/n2n_v3_linux_x64_v3.1.1_r1255_static_by_heiye.tar.gz"
                required: true
                type: string
            DOCKER_CONTEXT_PATH:
                description: "docker_context_path         e.g. n2n | frp"
                required: true
                type: string
            DOCKER_BUILD_DOCKERFILE:
                description: "docker_build_dockerfile     e.g. Dockerfile.run"
                required: true
                type: string
            DOCKER_APP_NAME:
                description: "docker app name             e.g. n2n | frp"
                required: true
                type: string
            IS_LATEST_VERSION:
                description: "docker tag is latest"
                required: true
                type: boolean
            DOCKER_BUILD_PLATFORMS:
                description: "docker_build_platforms      e.g. linux/amd64"
                required: true
                type: string
            DOCKER_BUILD_CACHE_TAG:
                description: "docker_build_cache_tag      e.g. buildcache | buildcache-fix"
                required: true
                type: string
            DOCKER_TEST_TAG:
                description: "docker test tag             e.g. v3 | v3_3.1.1_r1255"
                required: true
                type: string
            DOCKER_PUSH:
                default: false
                description: "docker push to registry"
                required: true
                type: boolean
            DOCKER_TAG_PREFIX:
                description: "docker_tag_prefix           e.g. sh- | conf-"
                required: false
                type: string
            DOCKER_TAG_SUFFIX:
                description: "docker_tag_suffix           e.g. -dev | -conf"
                required: false
                type: string
            DOCKER_TEST_SCRIPTS_PATH:
                description: "docker_test_scripts_path    eg. n2n/script/build"
                required: false
                type: string
            DOCKER_BUILD_DOCKERFILE_OK:
                description: "docker_build_dockerfile_ok  e.g. Dockerfile.build.ubuntu-20.04 | Dockerfile.build.alpine-latest | Dockerfile.build.debian-11"
                default: "Dockerfile.build.debian-11"
                required: true
                type: string
            DOCKER_BUILD_DOCKERFILE_FIX:
                description: "docker_build_dockerfile_fix e.g. Dockerfile.build.ubuntu-18.04 | Dockerfile.build.alpine-3.8 | Dockerfile.build.debian-11"
                default: "Dockerfile.build.debian-11"
                required: true
                type: string
            DOCKER_BUILD_WHITH_OUT_CACHE:
                default: false
                description: "docker_build_whith_out_cache"
                required: true
                type: boolean

        outputs:
            DOCKER_BUILD_DOCKERFILE:
                description: "docker build dockerfile"
                value: ${{ jobs.docker-build-psuh.outputs.DOCKER_BUILD_DOCKERFILE }}
env:
    # Use docker.io for Docker Hub if empty
    # REGISTRY: ghcr.io
    REGISTRY: docker.io

jobs:
    docker-build-psuh:
        name: docker-build-psuh - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            # This is used to complete the identity challenge
            # with sigstore/fulcio when running outside of PRs.
            id-token: write
        outputs:
            DOCKER_BUILD_DOCKERFILE: ${{ steps.n2n-test.outputs.DOCKER_BUILD_DOCKERFILE }}

        steps:
            - name: Checkout - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
              uses: actions/checkout@v3

            - name: init DOCKER_BUILD - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
              run: |
                  echo "DOCKER_PUSH          : ${{ inputs.DOCKER_PUSH }}"
                  echo "DOCKER_PUSH == true  : ${{ inputs.DOCKER_PUSH == true }}"
                  echo "DOCKER_PUSH == 'true': ${{ inputs.DOCKER_PUSH == 'true' }}"
                  echo "DOCKER_BUILD_WHITH_OUT_CACHE          : ${{ inputs.DOCKER_BUILD_WHITH_OUT_CACHE }}"
                  echo "DOCKER_BUILD_WHITH_OUT_CACHE == true  : ${{ inputs.DOCKER_BUILD_WHITH_OUT_CACHE == true }}"
                  echo "DOCKER_BUILD_WHITH_OUT_CACHE == 'true': ${{ inputs.DOCKER_BUILD_WHITH_OUT_CACHE == 'true' }}"
                  str_download_urls="${{ inputs.STR_DOWNLOAD_URLS }}"
                  mkdir -p ./n2n/tmp/
                  echo -e "${str_download_urls//,/'\n'}" >> ./n2n/tmp/down_urls.txt
                  echo -e "" >> ./n2n/tmp/down_urls.txt
                  echo '# cat ./n2n/tmp/down_urls.txt #'
                  cat ./n2n/tmp/down_urls.txt

            - name: Set up QEMU - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
              uses: docker/setup-qemu-action@v2

            # Install the cosign tool except on PR
            # https://github.com/sigstore/cosign-installer
            - name: Install cosign - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
              if: inputs.DOCKER_PUSH == true
              uses: sigstore/cosign-installer@v3.0.5
              with:
                  cosign-release: "v2.0.2" # optional

            # Workaround: https://github.com/docker/build-push-action/issues/461
            - name: Setup buildx - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
              uses: docker/setup-buildx-action@v2

            # Login against a Docker registry except on PR
            # https://github.com/docker/login-action
            - name: Log into registry ${{ env.REGISTRY }} - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
              # if: inputs.DOCKER_PUSH == true
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ secrets.REGISTRY_USERNAME }}
                  password: ${{ secrets.REGISTRY_TOKEN }}

            # Extract metadata (tags, labels) for Docker
            # https://github.com/docker/metadata-action
            - name: Extract metadata  - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ inputs.DOCKER_APP_NAME }}
                  flavor: |
                      prefix=${{ inputs.DOCKER_TAG_PREFIX }}, onlatest=true
                      suffix=${{ inputs.DOCKER_TAG_SUFFIX }}, onlatest=true
                  tags: |
                      type=raw,value=latest, enable=${{ inputs.IS_LATEST_VERSION == true }}
                      type=raw,value=${{ inputs.VERSION_BIG }}, enable=${{ inputs.VERSION_B_S_rC == inputs.VERSION_BIG }}
                      type=raw,value=releases-${{ inputs.VERSION_BIG }}, enable=${{ inputs.VERSION_B_S_rC == inputs.VERSION_BIG }}
                      type=raw,value=${{ inputs.VERSION_B_S_rC }}, enable=${{ inputs.VERSION_B_S_rC != inputs.VERSION_BIG }}
                      type=raw,value=${{ format( 'v.{0}_r{1}', inputs.VERSION_SMALL, inputs.VERSION_COMMIT ) }}, enable=${{ inputs.VERSION_B_S_rC != inputs.VERSION_BIG && inputs.VERSION_COMMIT != ''  }}
                  labels: |
                      org.opencontainers.image.version=${{ inputs.VERSION_B_S_rC }}

            # Build and push Docker image with Buildx (don't push on PR)
            # https://github.com/docker/build-push-action
            - name: Build and push - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
              id: build-and-push
              uses: docker/build-push-action@v4
              with:
                  context: ${{ inputs.DOCKER_CONTEXT_PATH }}
                  file: ${{ inputs.DOCKER_CONTEXT_PATH }}/${{ inputs.DOCKER_BUILD_DOCKERFILE }}
                  platforms: ${{ inputs.DOCKER_BUILD_PLATFORMS }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  push: ${{ inputs.DOCKER_PUSH == true }}
                  load: ${{ inputs.DOCKER_PUSH != true }}
                #   no-cache: ${{  inputs.DOCKER_BUILD_WHITH_OUT_CACHE == true }}
                #   cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ inputs.DOCKER_APP_NAME }}:${{ inputs.DOCKER_BUILD_CACHE_TAG }}
                #   cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ inputs.DOCKER_APP_NAME }}:${{ inputs.DOCKER_BUILD_CACHE_TAG }},mode=max
                  build-args: |
                      VERSION_BIG=${{ inputs.VERSION_BIG }}
                      VERSION_SMALL=${{ inputs.VERSION_SMALL }}
                      VERSION_COMMIT=${{ inputs.VERSION_COMMIT }}
                      VERSION_B_S_rC=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
                      STR_DOWNLOAD_URLS=${{ inputs.STR_DOWNLOAD_URLS }}
                      REGISTRY_USERNAME=${{ secrets.REGISTRY_USERNAME }}
                      DOCKER_APP_NAME=${{ inputs.DOCKER_APP_NAME }}

            - name: Test - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
              id: n2n-test
              run: |
                  cd ${{ inputs.DOCKER_TEST_SCRIPTS_PATH }}
                  LOG_INFO() {
                    echo -e $(caller) "\033[0;32m[    INFO] $@ \033[0m"
                  }

                  LOG_ERROR() {
                    echo -e $(caller) "\033[0;31m[   ERROR] $@ \033[0m"
                    if [[ -n "${WAIT_DEBUG}" ]]; then
                        sleep 3
                    fi
                  }

                  LOG_WARNING() {
                    echo -e $(caller) "\033[0;33m[ WARNING] $@ \033[0m"
                    if [[ -n "${WAIT_DEBUG}" ]]; then
                        sleep 1
                    fi
                  }

                  if [[ ! -r test/docker-build-test.sh ]]; then
                    LOG_ERROR '测试文件读取失败, 跳过测试.'
                    exit 0
                  fi
                  chmod +x test/*.sh
                  LOG_INFO "Test start: ${{ inputs.VERSION_B_S_rC }}"
                  FLAG_TEST_PASS="true"

                  REGISTRY='${{ env.REGISTRY }}'
                  REGISTRY_USERNAME='${{ secrets.REGISTRY_USERNAME }}'
                  DOCKER_APP_NAME='${{ inputs.DOCKER_APP_NAME }}'
                  DOCKER_TEST_TAG='${{ inputs.DOCKER_TEST_TAG }}'
                  DOCKER_BUILD_PLATFORMS='${{ inputs.DOCKER_BUILD_PLATFORMS }}'
                  export REGISTRY="${REGISTRY}"
                  export REGISTRY_USERNAME="${REGISTRY_USERNAME}"
                  export DOCKER_APP_NAME="${DOCKER_APP_NAME}"
                  export DOCKER_TEST_TAG="${DOCKER_TEST_TAG}"
                  export DOCKER_BUILD_PLATFORMS="${DOCKER_BUILD_PLATFORMS}"

                  ####################################
                  source test/docker-build-test.sh
                  ####################################

                  echo "FLAG_TEST_PASS=${FLAG_TEST_PASS}">> $GITHUB_OUTPUT
                  LOG_INFO "FLAG_TEST_PASS: ${FLAG_TEST_PASS}"
                  if [[ "${FLAG_TEST_PASS}" != "true" ]]; then
                    LOG_ERROR "Test faild: ${{ inputs.VERSION_B_S_rC }}"
                    echo "DOCKER_BUILD_DOCKERFILE=${{ inputs.DOCKER_BUILD_DOCKERFILE_OK }}">> $GITHUB_OUTPUT
                    # exit 1
                    exit 0
                  fi
                  LOG_INFO "Test done: ${{ inputs.VERSION_B_S_rC }}"
                  echo "DOCKER_BUILD_DOCKERFILE=${{ inputs.DOCKER_BUILD_DOCKERFILE_FIX }}">> $GITHUB_OUTPUT
                  exit 0

            # Sign the resulting Docker image digest except on PRs.
            # This will only write to the public Rekor transparency log when the Docker
            # repository is public to avoid leaking data.  If you would like to publish
            # transparency data even for private images, pass --force to cosign below.
            # https://github.com/sigstore/cosign
            - name: Sign image - ${{ inputs.DOCKER_PUSH }} - ${{ inputs.DOCKER_TEST_TAG }}
              if: ${{ inputs.DOCKER_PUSH == true && steps.n2n-test.outputs.FLAG_TEST_PASS == 'true' }}
              env:
                  COSIGN_EXPERIMENTAL: "true"
              # This step uses the identity token to provision an ephemeral certificate
              # against the sigstore community Fulcio instance.
              run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push.outputs.digest }}
