name: docker publish frp

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '30 21 * * *'
  push:
    branches: ["*"]
    # Publish semver tags as releases.
    # tags: [ 'v*.*.*' ]
  pull_request:
    branches: ["*"]

env:
  # Use docker.io for Docker Hub if empty
  # REGISTRY: ghcr.io
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  # IMAGE_NAME: ${{ github.repository }}
  APP_NAME: frp

jobs:
  build:
    runs-on: ubuntu-latest
    # if: ${{ false }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: "v1.13.1"

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.APP_NAME }}
          tags: |
            # set latest tag for master branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            # branch event
            type=ref,event=branch,enable=${{ github.ref != format('refs/heads/{0}', 'master') }}

      # - name: Build and load to Docker
      #   id: build-and-load
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: ${{ env.APP_NAME }}
      #     load: true
      #     tags: ${{ secrets.REGISTRY_USERNAME }}/${{ env.APP_NAME }}:test

      # - name: Test docker
      #   id: docker-test
      #   run: |
      #     echo "test start"
      #     docker network create --driver bridge --subnet=172.31.0.0/16 frp-test
      #     REGISTRY_USERNAME=${{ secrets.REGISTRY_USERNAME }}
      #     APP_NAME=${{ env.APP_NAME }}
      #     # REGISTRY_USERNAME=zctmdc
      #     # APP_NAME=frp
      #     ADMIN_PORT=7480
      #     docker run -d --name frps \
      #         --network frp-test \
      #         -e SUBDOMAIN_HOST=frp.example.com \
      #         -e ADMIN_PORT=${ADMIN_PORT} \
      #         -e MODE=RUN_FRPS \
      #         --ip 172.31.0.30 \
      #         --add-host frp.example.com:172.31.0.30 \
      #         ${REGISTRY_USERNAME}/${APP_NAME}:test

      #     docker run -d --name frpc \
      #         --network frp-test \
      #         -e SUBDOMAIN_HOST=frp.example.com \
      #         -e ADMIN_PORT=${ADMIN_PORT} \
      #         --add-host frp.example.com:172.31.0.30 \
      #         ${REGISTRY_USERNAME}/${APP_NAME}:test

      #     sleep 15
      #     result="$(docker exec -i frps curl --head "http://localhost:${ADMIN_PORT}/healthz")"
      #     if [[ -z "$(echo ${result}| head -n 1 | grep -o '200')" ]]; then
      #         echo "test faild: frps: http resp code - '${result}'"
      #         exit 1
      #     fi
      #     result="$(docker exec -i frpc curl --head "http://localhost:${ADMIN_PORT}/healthz")"
      #     if [[ -z "$(echo ${result}| head -n 1 | grep -o '200')" ]]; then
      #         echo "test faild: frpc: http resp code - '${result}'"
      #         exit 1
      #     fi
      #     echo "test pass"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: ${{ github.event_name != 'pull_request' }}
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.APP_NAME }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: "linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6"
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.APP_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.APP_NAME }}:buildcache,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
